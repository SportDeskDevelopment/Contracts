openapi: 3.0.0
info:
  title: User Roles API
  version: 1.0.0
servers:
  - url: http://localhost:5000

paths:
  /api/users/me:
    get:
      operationId: getCurrentUser
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/InvalidToken"

  /api/users/me/lang:
    patch:
      operationId: updateUserLanguage
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLanguageRequest"
      responses:
        "200":
          description: Language updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/InvalidToken"
        "400":
          $ref: "#/components/responses/InvalidInput"

  /api/users/me/role:
    patch:
      operationId: updateUserRole
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/InvalidToken"
        "400":
          $ref: "#/components/responses/InvalidInput"
        "403":
          $ref: "#/components/responses/InvalidRole"

  /api/users/me/roles:
    get:
      operationId: getUserRoles
      tags:
        - roles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of user roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRole"
        "401":
          $ref: "#/components/responses/InvalidToken"

    post:
      operationId: assignUserRole
      tags:
        - roles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRoleRequest"
      responses:
        "201":
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRole"
        "401":
          $ref: "#/components/responses/InvalidToken"
        "400":
          $ref: "#/components/responses/InvalidInput"
        "403":
          $ref: "#/components/responses/InvalidRole"

  /api/profiles/trainer/me:
    get:
      operationId: getTrainerProfile
      tags:
        - profiles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Trainer profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainerProfile"
        "401":
          $ref: "#/components/responses/InvalidToken"
        "404":
          $ref: "#/components/responses/ProfileNotFound"

  /api/profiles/trainer:
    post:
      operationId: createTrainerProfile
      tags:
        - profiles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrainerProfileRequest"
      responses:
        "201":
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainerProfile"
        "401":
          $ref: "#/components/responses/InvalidToken"
        "400":
          $ref: "#/components/responses/InvalidInput"
        "409":
          $ref: "#/components/responses/ProfileExists"

    delete:
      operationId: deleteTrainerProfile
      tags:
        - profiles
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Profile deleted successfully
        "401":
          $ref: "#/components/responses/InvalidToken"
        "404":
          $ref: "#/components/responses/ProfileNotFound"

components:
  schemas:
    UserResponse:
      type: object
      required:
        - id
        - email
        - name
        - preferredLang
        - activeRole
        - roles
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        preferredLang:
          type: string
          enum: [en, ru]
        activeRole:
          type: string
          enum: [TRAINER, TRAINEE, PARENT, ADMIN, SUPERADMIN]
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"

    UpdateLanguageRequest:
      type: object
      required:
        - preferredLang
      properties:
        preferredLang:
          type: string
          enum: [en, ru]

    UpdateRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [TRAINER, TRAINEE, PARENT, ADMIN, SUPERADMIN]

    UserRole:
      type: object
      required:
        - type
        - hasProfile
      properties:
        type:
          type: string
          enum: [TRAINER, TRAINEE, PARENT, ADMIN, SUPERADMIN]
        hasProfile:
          type: boolean

    AssignRoleRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [TRAINER, TRAINEE, PARENT, ADMIN, SUPERADMIN]

    TrainerProfile:
      type: object
      required:
        - id
        - userId
        - specialization
        - experience
      properties:
        id:
          type: string
        userId:
          type: string
        specialization:
          type: string
        experience:
          type: integer
        description:
          type: string
        achievements:
          type: array
          items:
            type: string

    CreateTrainerProfileRequest:
      type: object
      required:
        - specialization
        - experience
      properties:
        specialization:
          type: string
        experience:
          type: integer
        description:
          type: string
        achievements:
          type: array
          items:
            type: string

  responses:
    InvalidToken:
      description: Invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid token"

    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid input data"

    InvalidRole:
      description: Invalid role
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid role or insufficient permissions"

    ProfileNotFound:
      description: Profile not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Profile not found"

    ProfileExists:
      description: Profile already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Profile already exists"
